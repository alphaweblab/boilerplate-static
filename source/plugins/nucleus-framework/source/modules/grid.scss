@import '../settings/variables';
@import 'breakpoint';
@import '../plugins/type-checking/type-checking';

.g-grid {
	display: flex;
	flex-wrap: wrap;
	padding-right: #{map-get($grid, gutter)};
	padding-left: #{map-get($grid, gutter)};
	&.-gutterNone {padding-left: 0; padding-right: 0;}
	&.-gutterNone .g-cell {padding-left: 0; padding-right: 0;}
	&.-wrapNone {flex-wrap: nowrap;}
	&.-alignStart {align-items: flex-start;}
	&.-alignEnd {align-items: flex-end;}
	&.-alignCenter {align-items: center;}
	&.-alignStretch {align-items: stretch;}
	&.-contentStart {justify-content: flex-start;}
	&.-contentEnd {justify-content: flex-end;}
	&.-contentCenter {justify-content: center;}
	.g-grid {
		padding-left: 0;
		padding-right: 0;
		margin-right: -#{map-get($grid, gutter)};
		margin-left: -#{map-get($grid, gutter)};
	}
}

.g-grid > .g-cell {
	flex: 0 0 auto;
	padding-right: #{map-get($grid, gutter)};
	padding-left: #{map-get($grid, gutter)};
	width: 100%;
	&.-growDisable {flex-grow: 0;}
	&.-shrinkDisable {flex-shrink: 0;}
	&.-growEnable {flex-grow: 1;}
	&.-shrinkEnable {flex-shrink: 1;}
	&.-alignStart {align-self: flex-start;}
	&.-alignEnd {align-self: flex-end;}
	&.-alignCenter {align-self: center;}
	&.-alignStretch {align-self: stretch;}
	&.-widthAuto {width: auto;}
}

@include breakpoint(mobile) {
	.g-grid.-typeFixed {width: #{map-get($containers, mobile)};}
	.g-grid.-typeFluid {width: 100%;}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-columnMobile-#{$i} {
			width: ((100 / map-get($grid, columns)) * $i) * 1%;
		}
	}
	@for $i from 1 through 100 {
		.g-grid > .g-cell.-percentMobile-#{$i} {
			width: ($i * 1%);
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-offsetMobile-#{$i} {
			margin-left: (($i * 100) / map-get($grid, columns)) * 1%;
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-orderMobile-#{$i} {
			order: $i;
		}
	}
}

@include breakpoint(mobile-only) {
	.g-grid > .g-cell.-hideMobile {display: none;}
	.g-grid > .g-cell.-showMobile {display: block;}
}

@include breakpoint(tablet) {
	.g-grid.-typeFixed {width: #{map-get($containers, tablet)};}
	.g-grid.-typeFluid {width: 100%;}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-columnTablet-#{$i} {
			width: ((100 / map-get($grid, columns)) * $i) * 1%;
		}
	}
	@for $i from 1 through 100 {
		.g-grid > .g-cell.-percentTablet-#{$i} {
			width: ($i * 1%);
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-offsetTablet-#{$i} {
			margin-left: (($i * 100) / map-get($grid, columns)) * 1%;
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-orderTablet-#{$i} {
			order: $i;
		}
	}
}

@include breakpoint(tablet-only) {
	.g-grid > .g-cell.-hideTablet {display: none;}
	.g-grid > .g-cell.-showTablet {display: block;}
}

@include breakpoint(desktop) {
	.g-grid.-typeFixed {width: #{map-get($containers, desktop)};}
	.g-grid.-typeFluid {width: 100%;}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-columnDesktop-#{$i} {
			width: ((100 / map-get($grid, columns)) * $i) * 1%;
		}
	}
	@for $i from 1 through 100 {
		.g-grid > .g-cell.-percentDesktop-#{$i} {
			width: ($i * 1%);
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-offsetDesktop-#{$i} {
			margin-left: (($i * 100) / map-get($grid, columns)) * 1%;
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-orderDesktop-#{$i} {
			order: $i;
		}
	}
}

@include breakpoint(desktop-only) {
	.g-grid > .g-cell.-hideDesktop {display: none;}
	.g-grid > .g-cell.-showDesktop {display: block;}
}

@include breakpoint(highdef) {
	.g-grid.-typeFixed {width: #{map-get($containers, highdef)};}
	.g-grid.-typeFluid {width: 100%;}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-columnHighdef-#{$i} {
			width: ((100 / map-get($grid, columns)) * $i) * 1%;
		}
	}
	@for $i from 1 through 100 {
		.g-grid > .g-cell.-percentHighdef-#{$i} {
			width: ($i * 1%);
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-offsetHighdef-#{$i} {
			margin-left: (($i * 100) / map-get($grid, columns)) * 1%;
		}
	}
	@for $i from 1 through map-get($grid, columns) {
		.g-grid > .g-cell.-orderHighdef-#{$i} {
			order: $i;
		}
	}
}

@include breakpoint(highdef) {
	.g-grid > .g-cell.-hideHighdef {display: none;}
	.g-grid > .g-cell.-showHighdef {display: block;}
}
